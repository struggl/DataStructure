'''
题目描述：一个数组里，除了三个数是唯一出现的，其余的数都出现偶数次，找出这三个数中任意一个。
输入样例：
[1,2,4,5,6,4,2]
输出：
1 or 5 or 6均可

方法思路分析(费时1h15min)
step1:
对于不同的数字，显然二进制表示中必定至少有一个位可以把它们区分开来，例如
5:0101
6:0110
9:1001
显然第一个位1就可以把这三个不同的数划分为两组。
对于任意一个符合题意的数组，暂且不考虑那三个唯一出现的数字，则对于其他数字，无论取二进制中的哪一个位，
都可以将它们分到两组，极端情况是所有偶数次出现的数字在指定二进制位都为1，或者都为0,由于它们偶数次出现，
因此无论如何，在不考虑三个唯一出现数字进行划分时，两组数的元素数量都是偶数。

step2:
进一步考虑那三个唯一出现的数字的划分。
对于指定二进制位，这三个数的二进制可能都取1，或者都取0.
当都取1时，0组的遍历异或值为0
当都取0时，1组的遍历异或值为0
我们所需要的是这三个数被划分为1个元素和2个元素，
当元素数为偶数的分组遍历异或值不为0时，返回奇数组的遍历异或值

*细致分析
当这三个数不包含0时，这两个分组的遍历异或值都不为0，并且元素数量为奇数的那个分组的遍历异或值即为三个数的其中一个。
当这三个数包含0时，若0分为一组，则必有一个组的异或遍历值为0.但实际上并不影响。
假设三个数为[0,a,b]
a.若0分为单独一组，则0组遍历异或值为0，元素个数为奇数，1组异或值不为0，个数为偶数0。
此时返回奇数组的遍历异或值，即0.问题解决。
b.若0和另一个数，假设是a分为一组，则0组个数为偶，遍历异或值不为0，返回奇数组的遍历异或值，即为b，问题解决

'''
def isOne(n,i):
	#判断整数n的二进制表示中，从右到左的第i位是否为1，i >= 0
	return ((n>>i)&1) == 1

def findSingle(arr):
	if type(arr) != list:
		return
	if len(arr) < 3:
		return
	'''实际上这一步可以跳过
	检测0是否为三个唯一出现元素中的一个
	count0 = 0
	for v in arr:
		if v == 0:
			count0 += 1
	if count0 == 1:
		return 0
	'''
	#遍历每个二进制位
	for i in range(64):
		res1 = res0 = count0 = count1 = 0
		for v in arr:
			if isOne(v,i):
				res1 ^= v
				count1 += 1
			else:
				res0 ^= v
				count0 += 1
		if count0 % 2 == 1 and res1 != 0:
			return res0
		if count1 % 2 == 1 and res0 != 0:
			return res1	

if __name__ == '__main__':
	arr = [2,6,7,7,8,8,3,3,10]
	print(findSingle(arr))
